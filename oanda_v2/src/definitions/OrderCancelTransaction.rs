use serde :: { Serialize , Deserialize } ; _blank_ ! () ; # [derive (Serialize , Deserialize)] struct OrderCancelTransaction { # [doc = " The Transaction’s Identifier."] id : Option < TransactionID > , # [doc = " The date/time when the Transaction was created."] time : Option < DateTime > , # [doc = " The ID of the user that initiated the creation of the Transaction."] userID : Option < integer > , # [doc = " The ID of the Account the Transaction was created for."] accountID : Option < AccountID > , # [doc = " The ID of the “batch” that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously."] batchID : Option < TransactionID > , # [doc = " The Request ID of the request which generated the transaction."] requestID : Option < RequestID > , # [doc = " The Type of the Transaction. Always set to “ORDER_CANCEL” for an OrderCancelTransaction."] # [serde (default = "ORDER_CANCEL")] type : TransactionType , # [doc = " The ID of the Order cancelled"] orderID : Option < OrderID > , # [doc = " The client ID of the Order cancelled (only provided if the Order has a client Order ID)."] clientOrderID : Option < OrderID > , # [doc = " The reason that the Order was cancelled."] reason : Option < OrderCancelReason > , # [doc = " The ID of the Order that replaced this Order (only provided if this Order was cancelled for replacement)."] replacedByOrderID : Option < OrderID > , }