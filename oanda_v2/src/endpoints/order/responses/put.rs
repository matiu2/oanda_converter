use lib :: endpoints :: transaction ; ; use lib :: endpoints :: transaction ; ; use lib :: endpoints :: transaction ; ; use lib :: endpoints :: transaction ; ; use lib :: endpoints :: transaction ; ; use lib :: endpoints :: order :: responses :: put ; ; use lib :: endpoints :: order :: responses :: put ; use serde :: { Serialize , Deserialize } ; # [doc = " The Order was successfully cancelled and replaced"] # [derive (Serialize , Deserialize)] struct Put201 { # [doc = " The Transaction that cancelled the Order to be replaced."] order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction that created the replacing Order as"] # [doc = " requested."] order_create_transaction : Option < Transaction > , # [doc = " The Transaction that filled the replacing Order. This is"] # [doc = " only provided when the replacing Order was immediately"] # [doc = " filled."] order_fill_transaction : Option < OrderFillTransaction > , # [doc = " The Transaction that reissues the replacing Order. Only"] # [doc = " provided when the replacing Order was partially filled"] # [doc = " immediately and is configured to be reissued for its"] # [doc = " remaining units."] order_reissue_transaction : Option < Transaction > , # [doc = " The Transaction that rejects the reissue of the Order."] # [doc = " Only provided when the replacing Order was partially filled"] # [doc = " immediately and was configured to be reissued, however the"] # [doc = " reissue was rejected."] order_reissue_reject_transaction : Option < Transaction > , # [doc = " The Transaction that cancelled the replacing Order. Only"] # [doc = " provided when the replacing Order was immediately cancelled."] replacing_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } # [derive (Serialize , Deserialize)] struct Put400 { # [doc = " The Transaction that rejected the creation of the replacing"] # [doc = " Order"] order_reject_transaction : Option < Transaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account."] last_transaction_id : Option < TransactionID > , # [doc = " The code of the error that has occurred. This field may not"] # [doc = " be returned for some errors."] error_code : Option < string > , # [doc = " The human-readable description of the error that has"] # [doc = " occurred."] error_message : string , } # [derive (Serialize , Deserialize)] struct Put404 { # [doc = " The Transaction that rejected the cancellation of the Order"] # [doc = " to be replaced. Only present if the Account exists."] order_cancel_reject_transaction : Option < Transaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request. Only present if the Account exists."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account. Only present if the Account exists."] last_transaction_id : Option < TransactionID > , # [doc = " The code of the error that has occurred. This field may not"] # [doc = " be returned for some errors."] error_code : Option < string > , # [doc = " The human-readable description of the error that has"] # [doc = " occurred."] error_message : string , } # [derive (Debug)] pub enum Error { E400 (Put400) , E404 (Put404) , }