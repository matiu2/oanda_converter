use lib :: endpoints :: account :: responses :: configuration ; ; use lib :: endpoints :: account :: responses :: configuration ; use serde :: { Serialize , Deserialize } ; # [doc = " The Account was configured successfully."] # [derive (Serialize , Deserialize)] struct Configuration200 { # [doc = " The transaction that configures the Account."] client_configure_transaction : Option < ClientConfigureTransaction > , # [doc = " The ID of the last Transaction created for the Account."] last_transaction_id : Option < TransactionID > , } # [derive (Serialize , Deserialize)] struct Configuration400 { # [doc = " The transaction that rejects the configuration of the"] # [doc = " Account."] client_configure_reject_transaction : Option < ClientConfigureRejectTransaction > , # [doc = " The ID of the last Transaction created for the Account."] last_transaction_id : Option < TransactionID > , # [doc = " The code of the error that has occurred. This field may not"] # [doc = " be returned for some errors."] error_code : Option < string > , # [doc = " The human-readable description of the error that has"] # [doc = " occurred."] error_message : string , } # [derive (Serialize , Deserialize)] struct Configuration403 { # [doc = " The transaction that rejects the configuration of the"] # [doc = " Account."] client_configure_reject_transaction : Option < ClientConfigureRejectTransaction > , # [doc = " The ID of the last Transaction created for the Account."] last_transaction_id : Option < TransactionID > , # [doc = " The code of the error that has occurred. This field may not"] # [doc = " be returned for some errors."] error_code : Option < string > , # [doc = " The human-readable description of the error that has"] # [doc = " occurred."] error_message : string , } # [derive (Debug)] pub enum Error { E400 (Configuration400) , E403 (Configuration403) , }