use crate :: client :: Client ; struct Transaction < 'a > { client : & 'a Client , } impl < 'a > Transaction < 'a > { # [doc = " Get a list of Transactions pages that satisfy a time-based Transaction query."] pub async fn transactions (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , from : DateTime , to : DateTime , page_size : Integer , type : ListOf) -> Result < () > { let url = "/v3/accounts/{accountID}/transactions" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("from" , from) , ("to" , to) , ("pageSize" , page_size) , ("type" , type)] ; self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) ; } # [doc = " Get the details of a single Account Transaction."] pub async fn get (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , transaction_id : TransactionId) -> Result < () > { let url = "/v3/accounts/{accountID}/transactions/{transactionID}" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "transactionID" + "}") ; let url = self . client . url (url) ; let query = [] ; self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) ; } # [doc = " Get a range of Transactions for an Account based on the Transaction IDs."] pub async fn idrange (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , from : TransactionId , to : TransactionId , type : ListOf) -> Result < () > { let url = "/v3/accounts/{accountID}/transactions/idrange" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("from" , from) , ("to" , to) , ("type" , type)] ; self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) ; } # [doc = " Get a range of Transactions for an Account starting at (but not including) a provided Transaction ID."] pub async fn sinceid (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , id : TransactionId , type : ListOf) -> Result < () > { let url = "/v3/accounts/{accountID}/transactions/sinceid" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("id" , id) , ("type" , type)] ; self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) ; } # [doc = " Get a stream of Transactions for an Account starting from when the request is made."] pub async fn stream (& self , authorization : String , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}/transactions/stream" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; self . client . get (url) . header ("Authorization" , authorization) . query (& query) ; } }