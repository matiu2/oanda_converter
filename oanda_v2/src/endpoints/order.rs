use crate :: client :: Client ; struct Order < 'a > { client : & 'a Client , } impl < 'a > Order < 'a > { # [doc = " The Order was created as specified"] # [derive (Serialize , Deserialize)] struct Code201 { # [doc = " The Transaction that created the Order specified by the"] # [doc = " request."] order_create_transaction : Option < Transaction > , # [doc = " The Transaction that filled the newly created Order. Only"] # [doc = " provided when the Order was immediately filled."] order_fill_transaction : Option < OrderFillTransaction > , # [doc = " The Transaction that cancelled the newly created Order. Only"] # [doc = " provided when the Order was immediately cancelled."] order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction that reissues the Order. Only provided when"] # [doc = " the Order is configured to be reissued for its remaining"] # [doc = " units after a partial fill and the reissue was successful."] order_reissue_transaction : Option < Transaction > , # [doc = " The Transaction that rejects the reissue of the Order. Only"] # [doc = " provided when the Order is configured to be reissued for"] # [doc = " its remaining units after a partial fill and the reissue"] # [doc = " was rejected."] order_reissue_reject_transaction : Option < Transaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Orders_responseordersResponse { E400 : # , E404 : [doc = " The Order specification was invalid"] } # [doc = " Create an Order for an Account"] pub async fn orders (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}/orders" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . post (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The list of Orders requested"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The list of Order detail objects"] orders : Vec < Order > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Orders_responseordersResponse { } # [doc = " Get a list of Orders for an Account"] pub async fn orders (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , ids : ListOf , state : OrderStateFilter , instrument : InstrumentName , count : Integer , before_id : OrderId) -> Result < () > { let url = "/v3/accounts/{accountID}/orders" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("ids" , ids) , ("state" , state) , ("instrument" , instrument) , ("count" , count) , ("beforeID" , before_id)] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " List of pending Orders for the Account"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The list of pending Order details"] orders : Vec < Order > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum PendingOrders_responsepending_ordersResponse { } # [doc = " List all pending Orders in an Account"] pub async fn pending_orders (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}/pendingOrders" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The details of the Order requested"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The details of the Order requested"] order : Option < Order > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Get_responsegetResponse { } # [doc = " Get details for a single Order in an Account"] pub async fn get (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , order_specifier : OrderSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/orders/{orderSpecifier}" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "orderSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Order was successfully cancelled and replaced"] # [derive (Serialize , Deserialize)] struct Code201 { # [doc = " The Transaction that cancelled the Order to be replaced."] order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction that created the replacing Order as"] # [doc = " requested."] order_create_transaction : Option < Transaction > , # [doc = " The Transaction that filled the replacing Order. This is"] # [doc = " only provided when the replacing Order was immediately"] # [doc = " filled."] order_fill_transaction : Option < OrderFillTransaction > , # [doc = " The Transaction that reissues the replacing Order. Only"] # [doc = " provided when the replacing Order was partially filled"] # [doc = " immediately and is configured to be reissued for its"] # [doc = " remaining units."] order_reissue_transaction : Option < Transaction > , # [doc = " The Transaction that rejects the reissue of the Order."] # [doc = " Only provided when the replacing Order was partially filled"] # [doc = " immediately and was configured to be reissued, however the"] # [doc = " reissue was rejected."] order_reissue_reject_transaction : Option < Transaction > , # [doc = " The Transaction that cancelled the replacing Order. Only"] # [doc = " provided when the replacing Order was immediately cancelled."] replacing_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Put_responseputResponse { E400 : # , E404 : [doc = " The Order specification was invalid"] } # [doc = " Replace an Order in an Account by simultaneously cancelling"] # [doc = " it and creating a replacement Order"] pub async fn put (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , client_request_id : ClientRequestId , account_id : AccountId , order_specifier : OrderSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/orders/{orderSpecifier}" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "orderSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . put (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . header ("ClientRequestID" , client_request_id) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Order was cancelled as specified"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The Transaction that cancelled the Order"] order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Cancel_responsecancelResponse { E404 : # } # [doc = " Cancel a pending Order in an Account"] pub async fn cancel (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , client_request_id : ClientRequestId , account_id : AccountId , order_specifier : OrderSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/orders/{orderSpecifier}/cancel" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "orderSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . put (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . header ("ClientRequestID" , client_request_id) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Orderâ€™s Client Extensions were successfully modified"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The Transaction that modified the Client Extensions for"] # [doc = " the Order"] order_client_extensions_modify_transaction : Option < OrderClientExtensionsModifyTransaction > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , } pub enum ClientExtensions_responseclient_extensionsResponse { E400 : # , E404 : [doc = " The Order Client Extensions specification was invalid"] } # [doc = " Update the Client Extensions for an Order in an Account. Do"] # [doc = " not set, modify, or delete clientExtensions if your account"] # [doc = " is associated with MT4."] pub async fn client_extensions (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , order_specifier : OrderSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/orders/{orderSpecifier}/clientExtensions" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "orderSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . put (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } }