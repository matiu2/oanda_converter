use crate :: client :: Client ; struct Account < 'a > { client : & 'a Client , } impl < 'a > Account < 'a > { # [doc = " The list of authorized Accounts has been provided."] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The list of Accounts the client is authorized to access and"] # [doc = " their associated properties."] accounts : Vec < AccountProperties > , } pub enum Accounts_responseaccountsResponse { } # [doc = " Get a list of all Accounts authorized for the provided"] # [doc = " token."] pub async fn accounts (& self , authorization : String) -> Result < () > { let url = "/v3/accounts" ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The full Account details are provided"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The full details of the requested Account."] account : Option < Account > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account."] last_transaction_id : Option < TransactionID > , } pub enum Get_responsegetResponse { } # [doc = " Get the full details for a single Account that a client has"] # [doc = " access to. Full pending Order, open Trade and open Position"] # [doc = " representations are provided."] pub async fn get (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Account summary are provided"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The summary of the requested Account."] account : Option < AccountSummary > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account."] last_transaction_id : Option < TransactionID > , } pub enum Summary_responsesummaryResponse { } # [doc = " Get a summary for a single Account that a client has access"] # [doc = " to."] pub async fn summary (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}/summary" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The list of tradeable instruments for the Account has been"] # [doc = " provided."] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The requested list of instruments."] instruments : Vec < Instrument > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account."] last_transaction_id : Option < TransactionID > , } pub enum Instruments_responseinstrumentsResponse { } # [doc = " Get the list of tradeable instruments for the given Account."] # [doc = " The list of tradeable instruments is dependent on the"] # [doc = " regulatory division that the Account is located in, thus"] # [doc = " should be the same for all Accounts owned by a single user."] pub async fn instruments (& self , authorization : String , account_id : AccountId , instruments : ListOf) -> Result < () > { let url = "/v3/accounts/{accountID}/instruments" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("instruments" , instruments)] ; let response = self . client . get (url) . header ("Authorization" , authorization) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Account was configured successfully."] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The transaction that configures the Account."] client_configure_transaction : Option < ClientConfigureTransaction > , # [doc = " The ID of the last Transaction created for the Account."] last_transaction_id : Option < TransactionID > , } pub enum Configuration_responseconfigurationResponse { E400 : # , E403 : [doc = " The configuration specification was invalid."] } # [doc = " Set the client-configurable portions of an Account."] pub async fn configuration (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}/configuration" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . patch (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Account state and changes are provided."] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The changes to the Account’s Orders, Trades and Positions"] # [doc = " since the specified Transaction ID. Only provided if the"] # [doc = " sinceTransactionID is supplied to the poll request."] changes : Option < AccountChanges > , # [doc = " The Account’s current price-dependent state."] state : Option < AccountChangesState > , # [doc = " The ID of the last Transaction created for the Account."] # [doc = " This Transaction ID should be used for future poll requests,"] # [doc = " as the client has already observed all changes up to and"] # [doc = " including it."] last_transaction_id : Option < TransactionID > , } pub enum Changes_responsechangesResponse { } # [doc = " Endpoint used to poll an Account for its current state and"] # [doc = " changes since a specified TransactionID."] pub async fn changes (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , since_transaction_id : TransactionId) -> Result < () > { let url = "/v3/accounts/{accountID}/changes" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("sinceTransactionID" , since_transaction_id)] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } }