use lib :: endpoints :: position :: responses :: close ; ; use lib :: endpoints :: position :: responses :: close ; use serde :: { Serialize , Deserialize } ; # [doc = " The Position closeout request has been successfully"] # [doc = " processed."] # [derive (Serialize , Deserialize)] struct Close200 { # [doc = " The MarketOrderTransaction created to close the long"] # [doc = " Position."] long_order_create_transaction : Option < MarketOrderTransaction > , # [doc = " OrderFill Transaction that closes the long Position"] long_order_fill_transaction : Option < OrderFillTransaction > , # [doc = " OrderCancel Transaction that cancels the MarketOrder created"] # [doc = " to close the long Position"] long_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The MarketOrderTransaction created to close the short"] # [doc = " Position."] short_order_create_transaction : Option < MarketOrderTransaction > , # [doc = " OrderFill Transaction that closes the short Position"] short_order_fill_transaction : Option < OrderFillTransaction > , # [doc = " OrderCancel Transaction that cancels the MarketOrder created"] # [doc = " to close the short Position"] short_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } # [derive (Serialize , Deserialize)] struct Close400 { # [doc = " The Transaction created that rejects the creation of a"] # [doc = " MarketOrder to close the long Position."] long_order_reject_transaction : Option < MarketOrderRejectTransaction > , # [doc = " The Transaction created that rejects the creation of a"] # [doc = " MarketOrder to close the short Position."] short_order_reject_transaction : Option < MarketOrderRejectTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , # [doc = " The code of the error that has occurred. This field may not"] # [doc = " be returned for some errors."] error_code : Option < string > , # [doc = " The human-readable description of the error that has"] # [doc = " occurred."] error_message : string , } # [derive (Serialize , Deserialize)] struct Close404 { # [doc = " The Transaction created that rejects the creation of a"] # [doc = " MarketOrder to close the long Position. Only present if the"] # [doc = " Account exists and a long Position was specified."] long_order_reject_transaction : Option < MarketOrderRejectTransaction > , # [doc = " The Transaction created that rejects the creation of a"] # [doc = " MarketOrder to close the short Position. Only present if the"] # [doc = " Account exists and a short Position was specified."] short_order_reject_transaction : Option < MarketOrderRejectTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request. Only present if the Account exists."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account. Only present if the Account exists."] last_transaction_id : Option < TransactionID > , # [doc = " The code of the error that has occurred. This field may not"] # [doc = " be returned for some errors."] error_code : Option < string > , # [doc = " The human-readable description of the error that has"] # [doc = " occurred."] error_message : string , } # [derive (Debug)] pub enum Error { E400 (Close400) , E404 (Close404) , }