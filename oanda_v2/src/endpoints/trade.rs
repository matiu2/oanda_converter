use crate :: client :: Client ; struct Trade < 'a > { client : & 'a Client , } impl < 'a > Trade < 'a > { # [doc = " The list of Trades requested"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The list of Trade detail objects"] trades : Vec < Trade > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Trades_responsetradesResponse { } # [doc = " Get a list of Trades for an Account"] pub async fn trades (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , ids : ListOf , state : TradeStateFilter , instrument : InstrumentName , count : Integer , before_id : TradeId) -> Result < () > { let url = "/v3/accounts/{accountID}/trades" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [("ids" , ids) , ("state" , state) , ("instrument" , instrument) , ("count" , count) , ("beforeID" , before_id)] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Account’s list of open Trades is provided"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The Account’s list of open Trades"] trades : Vec < Trade > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum OpenTrades_responseopen_tradesResponse { } # [doc = " Get the list of open Trades for an Account"] pub async fn open_trades (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId) -> Result < () > { let url = "/v3/accounts/{accountID}/openTrades" ; let url = url . replace ("{" + "accountID" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The details for the requested Trade is provided"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The details of the requested trade"] trade : Option < Trade > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Get_responsegetResponse { } # [doc = " Get the details of a specific Trade in an Account"] pub async fn get (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , trade_specifier : TradeSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/trades/{tradeSpecifier}" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "tradeSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . get (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Trade has been closed as requested"] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The MarketOrder Transaction created to close the Trade."] order_create_transaction : Option < MarketOrderTransaction > , # [doc = " The OrderFill Transaction that fills the Trade-closing"] # [doc = " MarketOrder and closes the Trade."] order_fill_transaction : Option < OrderFillTransaction > , # [doc = " The OrderCancel Transaction that immediately cancelled the"] # [doc = " Trade-closing MarketOrder."] order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Close_responsecloseResponse { E400 : # , E404 : [doc = " The Trade cannot be closed as requested."] } # [doc = " Close (partially or fully) a specific open Trade in an"] # [doc = " Account"] pub async fn close (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , trade_specifier : TradeSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/trades/{tradeSpecifier}/close" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "tradeSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . put (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Trade’s Client Extensions have been updated as"] # [doc = " requested."] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The Transaction that updates the Trade’s Client Extensions."] trade_client_extensions_modify_transaction : Option < TradeClientExtensionsModifyTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum ClientExtensions_responseclient_extensionsResponse { E400 : # , E404 : [doc = " The Trade’s Client Extensions cannot be modified as"] } # [doc = " Update the Client Extensions for a Trade. Do not add,"] # [doc = " update, or delete the Client Extensions if your account is"] # [doc = " associated with MT4."] pub async fn client_extensions (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , trade_specifier : TradeSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/trades/{tradeSpecifier}/clientExtensions" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "tradeSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . put (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } # [doc = " The Trade’s dependent Orders have been modified as"] # [doc = " requested."] # [derive (Serialize , Deserialize)] struct Code200 { # [doc = " The Transaction created that cancels the Trade’s existing"] # [doc = " Take Profit Order."] take_profit_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction created that creates a new Take Profit Order"] # [doc = " for the Trade."] take_profit_order_transaction : Option < TakeProfitOrderTransaction > , # [doc = " The Transaction created that immediately fills the Trade’s"] # [doc = " new Take Profit Order. Only provided if the new Take Profit"] # [doc = " Order was immediately filled."] take_profit_order_fill_transaction : Option < OrderFillTransaction > , # [doc = " The Transaction created that immediately cancels the Trade’s"] # [doc = " new Take Profit Order. Only provided if the new Take Profit"] # [doc = " Order was immediately cancelled."] take_profit_order_created_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction created that cancels the Trade’s existing"] # [doc = " Stop Loss Order."] stop_loss_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction created that creates a new Stop Loss Order"] # [doc = " for the Trade."] stop_loss_order_transaction : Option < StopLossOrderTransaction > , # [doc = " The Transaction created that immediately fills the Trade’s"] # [doc = " new Stop Order. Only provided if the new Stop Loss Order was"] # [doc = " immediately filled."] stop_loss_order_fill_transaction : Option < OrderFillTransaction > , # [doc = " The Transaction created that immediately cancels the Trade’s"] # [doc = " new Stop Loss Order. Only provided if the new Stop Loss"] # [doc = " Order was immediately cancelled."] stop_loss_order_created_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction created that cancels the Trade’s existing"] # [doc = " Trailing Stop Loss Order."] trailing_stop_loss_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction created that creates a new Trailing Stop"] # [doc = " Loss Order for the Trade."] trailing_stop_loss_order_transaction : Option < TrailingStopLossOrderTransaction > , # [doc = " The Transaction created that cancels the Trade’s existing"] # [doc = " Guaranteed Stop Loss Order."] guaranteed_stop_loss_order_cancel_transaction : Option < OrderCancelTransaction > , # [doc = " The Transaction created that creates a new Guaranteed Stop"] # [doc = " Loss Order for the Trade."] guaranteed_stop_loss_order_transaction : Option < GuaranteedStopLossOrderTransaction > , # [doc = " The IDs of all Transactions that were created while"] # [doc = " satisfying the request."] related_transaction_i_ds : Vec < TransactionID > , # [doc = " The ID of the most recent Transaction created for the"] # [doc = " Account"] last_transaction_id : Option < TransactionID > , } pub enum Orders_responseordersResponse { E400 : # } # [doc = " Create, replace and cancel a Trade’s dependent Orders (Take"] # [doc = " Profit, Stop Loss and Trailing Stop Loss) through the Trade"] # [doc = " itself"] pub async fn orders (& self , authorization : String , accept_datetime_format : AcceptDatetimeFormat , account_id : AccountId , trade_specifier : TradeSpecifier) -> Result < () > { let url = "/v3/accounts/{accountID}/trades/{tradeSpecifier}/orders" ; let url = url . replace ("{" + "accountID" + "}") ; let url = url . replace ("{" + "tradeSpecifier" + "}") ; let url = self . client . url (url) ; let query = [] ; let response = self . client . put (url) . header ("Authorization" , authorization) . header ("Accept-Datetime-Format" , accept_datetime_format) . query (& query) . send () . await ? ; let status_code = response . status_code () ; } }